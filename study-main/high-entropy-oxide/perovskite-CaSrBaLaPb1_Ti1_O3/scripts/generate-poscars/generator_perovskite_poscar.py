import csv
import os
import random
import sys

import count_perovskite_vector
from dotenv import load_dotenv

# .envファイルの読み込み
load_dotenv()

REMOTE_DIR = os.getenv("REMOTE_DIR")
WORK_DIR = os.getenv("WORK_DIR")

num_structures = int(os.getenv("NUM_STRUCTURES") or 0)

# 出力先ディレクトリ
POSCARS_DIRECTORY_PATH = (
    f"{REMOTE_DIR}{WORK_DIR}/structures/one_million_models/POSCARs/"
)
DATA_CSV_OUTPUT_DIRECTORY = f"{REMOTE_DIR}{WORK_DIR}/calc"

# 出力先ファイル
BASE_FINE_NAME = "POSCAR_"
CSV_FILE_NAME = "data.csv"


# ディレクトリが存在しない場合は作成
if not os.path.exists(POSCARS_DIRECTORY_PATH):
    os.makedirs(POSCARS_DIRECTORY_PATH)

# 初めの行から追加する行までのテキスト
initial_text = """""Ca0.2 Sr0.2 Ba0.2 La0.2 Pb0.2 Ti1 O3
1.0
       11.7381000519         0.0000000000         0.0000000000
        0.0000000000        11.7381000519         0.0000000000
        0.0000000000         0.0000000000        11.73800519
   Ca  Sr  Ba  La  Pb  Ti    O
   5   5   5   6   6   27   81
Direct"""

# 変化させる座標
coords_random = [
    "0.000000000         0.000000000         0.000000000",
    "0.333333333         0.000000000         0.000000000",
    "0.666666667         0.000000000         0.000000000",
    "0.000000000         0.333333333         0.000000000",
    "0.333333333         0.333333333         0.000000000",
    "0.666666667         0.333333333         0.000000000",
    "0.000000000         0.666666667         0.000000000",
    "0.333333333         0.666666667         0.000000000",
    "0.666666667         0.666666667         0.000000000",
    "0.000000000         0.000000000         0.333333333",
    "0.333333333         0.000000000         0.333333333",
    "0.666666667         0.000000000         0.333333333",
    "0.000000000         0.333333333         0.333333333",
    "0.333333333         0.333333333         0.333333333",
    "0.666666667         0.333333333         0.333333333",
    "0.000000000         0.666666667         0.333333333",
    "0.333333333         0.666666667         0.333333333",
    "0.666666667         0.666666667         0.333333333",
    "0.000000000         0.000000000         0.666666667",
    "0.333333333         0.000000000         0.666666667",
    "0.666666667         0.000000000         0.666666667",
    "0.000000000         0.333333333         0.666666667",
    "0.333333333         0.333333333         0.666666667",
    "0.666666667         0.333333333         0.666666667",
    "0.000000000         0.666666667         0.666666667",
    "0.333333333         0.666666667         0.666666667",
    "0.666666667         0.666666667         0.666666667",
]
# 固定座標(Ti)
coord_Ti = """
0.166666667         0.166666667         0.166666667
0.500000000         0.166666667         0.166666667
0.833333333         0.166666667         0.166666667
0.166666667         0.500000000         0.166666667
0.500000000         0.500000000         0.166666667
0.833333333         0.500000000         0.166666667
0.166666667         0.833333333         0.166666667
0.500000000         0.833333333         0.166666667
0.833333333         0.833333333         0.166666667
0.166666667         0.166666667         0.500000000
0.500000000         0.166666667         0.500000000
0.833333333         0.166666667         0.500000000
0.166666667         0.500000000         0.500000000
0.500000000         0.500000000         0.500000000
0.833333333         0.500000000         0.500000000
0.166666667         0.833333333         0.500000000
0.500000000         0.833333333         0.500000000
0.833333333         0.833333333         0.500000000
0.166666667         0.166666667         0.833333333
0.500000000         0.166666667         0.833333333
0.833333333         0.166666667         0.833333333
0.166666667         0.500000000         0.833333333
0.500000000         0.500000000         0.833333333
0.833333333         0.500000000         0.833333333
0.166666667         0.833333333         0.833333333
0.500000000         0.833333333         0.833333333
0.833333333         0.833333333         0.833333333
"""

# 固定座標(酸素)
coord_Oxi = """
0.166666667         0.000000000         0.166666667
0.166666667         0.166666667         0.000000000
0.000000000         0.166666667         0.166666667
0.500000000         0.000000000         0.166666667
0.500000000         0.166666667         0.000000000
0.333333333         0.166666667         0.166666667
0.833333333         0.000000000         0.166666667
0.833333333         0.166666667         0.000000000
0.666666667         0.166666667         0.166666667
0.166666667         0.333333333         0.166666667
0.166666667         0.500000000         0.000000000
0.000000000         0.500000000         0.166666667
0.500000000         0.333333333         0.166666667
0.500000000         0.500000000         0.000000000
0.333333333         0.500000000         0.166666667
0.833333333         0.333333333         0.166666667
0.833333333         0.500000000         0.000000000
0.666666667         0.500000000         0.166666667
0.166666667         0.666666667         0.166666667
0.166666667         0.833333333         0.000000000
0.000000000         0.833333333         0.166666667
0.500000000         0.666666667         0.166666667
0.500000000         0.833333333         0.000000000
0.333333333         0.833333333         0.166666667
0.833333333         0.666666667         0.166666667
0.833333333         0.833333333         0.000000000
0.666666667         0.833333333         0.166666667
0.166666667         0.000000000         0.500000000
0.166666667         0.166666667         0.333333333
0.000000000         0.166666667         0.500000000
0.500000000         0.000000000         0.500000000
0.500000000         0.166666667         0.333333333
0.333333333         0.166666667         0.500000000
0.833333333         0.000000000         0.500000000
0.833333333         0.166666667         0.333333333
0.666666667         0.166666667         0.500000000
0.166666667         0.333333333         0.500000000
0.166666667         0.500000000         0.333333333
0.000000000         0.500000000         0.500000000
0.500000000         0.333333333         0.500000000
0.500000000         0.500000000         0.333333333
0.333333333         0.500000000         0.500000000
0.833333333         0.333333333         0.500000000
0.833333333         0.500000000         0.333333333
0.666666667         0.500000000         0.500000000
0.166666667         0.666666667         0.500000000
0.166666667         0.833333333         0.333333333
0.000000000         0.833333333         0.500000000
0.500000000         0.666666667         0.500000000
0.500000000         0.833333333         0.333333333
0.333333333         0.833333333         0.500000000
0.833333333         0.666666667         0.500000000
0.833333333         0.833333333         0.333333333
0.666666667         0.833333333         0.500000000
0.166666667         0.000000000         0.833333333
0.166666667         0.166666667         0.666666667
0.000000000         0.166666667         0.833333333
0.500000000         0.000000000         0.833333333
0.500000000         0.166666667         0.666666667
0.333333333         0.166666667         0.833333333
0.833333333         0.000000000         0.833333333
0.833333333         0.166666667         0.666666667
0.666666667         0.166666667         0.833333333
0.166666667         0.333333333         0.833333333
0.166666667         0.500000000         0.666666667
0.000000000         0.500000000         0.833333333
0.500000000         0.333333333         0.833333333
0.500000000         0.500000000         0.666666667
0.333333333         0.500000000         0.833333333
0.833333333         0.333333333         0.833333333
0.833333333         0.500000000         0.666666667
0.666666667         0.500000000         0.833333333
0.166666667         0.666666667         0.833333333
0.166666667         0.833333333         0.666666667
0.000000000         0.833333333         0.833333333
0.500000000         0.666666667         0.833333333
0.500000000         0.833333333         0.666666667
0.333333333         0.833333333         0.833333333
0.833333333         0.666666667         0.833333333
0.833333333         0.833333333         0.666666667
0.666666667         0.833333333         0.833333333"""

# 特徴量数をvalueとした辞書を入れる空の辞書を作る
id_features_dictionary = {}

# 特徴量数(key)とID(value)を紐づけた逆引き辞書を入れる空の辞書を作る(今後役に立つ)
features_id_dictionary = {}

metal_type = ["Ca", "Sr", "Ba", "La", "Pb"]

# 金属同士の結合パターンを重複なしで作成
pairs = [
    tuple([i, j])
    for i in metal_type
    for j in metal_type
    if metal_type.index(i) <= metal_type.index(j)
]

# 'num_stuructures'の数だけidと特徴量とエネルギー列(空)を持つファイルを生成
# 'num_stuructures'の数まで要素を追加する
while len(features_id_dictionary) < num_structures:
    # 〇〇(id)を設定(1,2,3, ...)
    # 開始時は要素は何も含まれていないため、+1をしてidを1から始める
    id = len(features_id_dictionary) + 1
    # 出力ファイルのパス・名称設定
    # 作成ファイルのパスを定義(出力先ディレクトリ(上記)に所属させる)
    output_file_path = os.path.join(POSCARS_DIRECTORY_PATH, f"{BASE_FINE_NAME}{id}")

    if os.path.exists(output_file_path):
        print(f"{output_file_path} already exists.")
        sys.exit(1)

    # 変数部分をランダムに並び替えて書き込み
    random.shuffle(coords_random)

    count_result = count_perovskite_vector.main(
        coords_random, id, features_id_dictionary, id_features_dictionary, pairs
    )
    # 'coords_random'結合の数を数える金属たち、今回はTiは含まない
    # "id"特徴量を数え用としている構造に名付けられた番号
    # "features_id_dictionary"その構造のidをvalueに、特徴量(結合名とその数)をkeyに持つ辞書

    # 生成したファイルを開き、書き込む
    if count_result:
        with open(output_file_path, "w") as output_file:
            # 初めの構造条件の部分を書き込み＋改行
            output_file.write(initial_text + "\n")

            # 各行に改行を加える
            for line in coords_random:
                output_file.write(line + "\n")

            # 固定部分を書き込み
            # 「\n」(1個目)を使ってリスト内の要素を繋ぎ合わせる
            # 「\n」(2個目)を境にstrを区切ってリスト化する(ここで一行目を無視)
            output_file.write("\n".join(coord_Ti.split("\n")[1:]))
            output_file.write("\n".join(coord_Oxi.split("\n")[1:]))


if len(features_id_dictionary) == num_structures:
    with open(
        f"{DATA_CSV_OUTPUT_DIRECTORY}/{CSV_FILE_NAME}",
        "w",
        newline="",
        encoding="utf-8",
    ) as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["ID"] + ["_".join(pair) for pair in pairs] + ["result"])
        for ID in range(1, num_structures + 1):
            features_values = list(id_features_dictionary[ID])
            writer.writerow([ID] + features_values + [""])
else:
    sys.exit(1)
